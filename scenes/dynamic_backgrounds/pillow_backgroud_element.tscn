[gd_scene load_steps=12 format=2]

[ext_resource path="res://images/backgrounds/pillow.png" type="Texture" id=1]
[ext_resource path="res://scripts/dynamic_backgrounds/pillow_backgroud_element.gd" type="Script" id=2]

[sub_resource type="Shader" id=5]
code = "shader_type canvas_item;

uniform float hue : hint_range(-360, 360) = 0;

float _clamp(float v){
	if(v < 0.0){
		return 0.0;
	}
	if(v > 255.0){
		return 255.0;
	}
	return v;
}

vec3 transform_hue(vec3 color, float h){
	float cosA = cos(radians(h)); // hue <h> is in degrees
	float sinA = sin(radians(h)); // hue <h> is in degrees
	
	// this matrix rotates the RGB cube h degrees
	mat3 t_matrix = mat3(vec3(cosA + (1.0 - cosA)/3.0, (1.0 - cosA)/3.0 - sqrt(1.0/3.0)*sinA, (1.0 - cosA)/3.0 + sqrt(1.0/3.0)*sinA),  
	vec3((1.0 - cosA)/3.0 + sqrt(1.0/3.0)*sinA, cosA + (1.0 - cosA)/3.0, (1.0 - cosA)/3.0 - sqrt(1.0/3.0)*sinA), 
	vec3((1.0 - cosA)/3.0 - sqrt(1.0/3.0)*sinA, (1.0 - cosA)/3.0 + sqrt(1.0/3.0)*sinA, cosA + (1.0 - cosA)/3.0));
	
	float r = _clamp(color.r*t_matrix[0][0] + color.g*t_matrix[0][1] + color.b*t_matrix[0][2]);
	float g = _clamp(color.r*t_matrix[1][0] + color.g*t_matrix[1][1] + color.b*t_matrix[1][2]);
	float b = _clamp(color.r*t_matrix[2][0] + color.g*t_matrix[2][1] + color.b*t_matrix[2][2]);
	return vec3(r, g, b);
}

void fragment(){
	COLOR = texture(TEXTURE, UV);
	vec3 out_color = transform_hue(COLOR.rgb, hue);
	COLOR.rgb = out_color;
}"

[sub_resource type="ShaderMaterial" id=6]
resource_local_to_scene = true
shader = SubResource( 5 )
shader_param/hue = 0.0

[sub_resource type="Animation" id=1]
length = 0.001
tracks/0/type = "value"
tracks/0/path = NodePath("sprite:position")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Vector2( 0, 0 ) ]
}

[sub_resource type="Animation" id=2]
resource_name = "idle0"
length = 2.0
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath("sprite:position")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 1 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Vector2( 0, 0 ), Vector2( 0, -24 ) ]
}

[sub_resource type="Animation" id=3]
resource_name = "joy"
length = 3.0
tracks/0/type = "value"
tracks/0/path = NodePath("sprite:position")
tracks/0/interp = 2
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.5, 1, 1.5, 2, 2.5, 3 ),
"transitions": PoolRealArray( 1, 1, 1, 1, 1, 1, 1 ),
"update": 0,
"values": [ Vector2( 0, 0 ), Vector2( 0, -40 ), Vector2( 0, 0 ), Vector2( 0, -40 ), Vector2( 0, 0 ), Vector2( 0, -40 ), Vector2( 0, 0 ) ]
}

[sub_resource type="Animation" id=4]
resource_name = "stop"
length = 0.5
tracks/0/type = "value"
tracks/0/path = NodePath("sprite:position")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.001, 0.5 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 0,
"values": [ Vector2( 0, 0 ), Vector2( 0, 0 ), Vector2( 0, 0 ) ]
}

[sub_resource type="Animation" id=7]
length = 0.001
tracks/0/type = "value"
tracks/0/path = NodePath(".:material:shader_param/hue")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ 0.0 ]
}
tracks/1/type = "value"
tracks/1/path = NodePath(".:modulate")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 1 ) ]
}

[sub_resource type="Animation" id=8]
resource_name = "death"
length = 2.0
tracks/0/type = "value"
tracks/0/path = NodePath(".:modulate")
tracks/0/interp = 2
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 2 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 1 ), Color( 1, 1, 1, 0 ) ]
}

[sub_resource type="Animation" id=9]
resource_name = "joy"
length = 3.0
tracks/0/type = "value"
tracks/0/path = NodePath(".:material:shader_param/hue")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.5, 2.5 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 0,
"values": [ 0.0, 0.0, 360.0 ]
}

[node name="pillow_backgroud_element" type="Node2D"]
script = ExtResource( 2 )

[node name="sprite" type="Sprite" parent="."]
material = SubResource( 6 )
texture = ExtResource( 1 )

[node name="anim_movement" type="AnimationPlayer" parent="sprite"]
root_node = NodePath("../..")
autoplay = "idle0"
anims/RESET = SubResource( 1 )
anims/idle0 = SubResource( 2 )
anims/joy = SubResource( 3 )
anims/stop = SubResource( 4 )

[node name="anim_shader" type="AnimationPlayer" parent="sprite"]
anims/RESET = SubResource( 7 )
anims/death = SubResource( 8 )
anims/joy = SubResource( 9 )
